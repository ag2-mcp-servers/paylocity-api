# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:20:07+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header, Path

from models import (
    AddClientSecret,
    AdditionalRate,
    BenefitSetup,
    Earning,
    EmergencyContact,
    Employee,
    EmployeeIdResponse,
    LocalTax,
    NonPrimaryStateTax,
    SensitiveData,
    StagedEmployee,
    StateTax,
    V2CompaniesCompanyIdCodesCodeResourceGetResponse,
    V2CompaniesCompanyIdCodesCodeResourceGetResponse1,
    V2CompaniesCompanyIdCustomfieldsCategoryGetResponse,
    V2CompaniesCompanyIdCustomfieldsCategoryGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdAdditionalRatesPutResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdBenefitSetupPutResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdDirectDepositGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdDirectDepositGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdEarningsEarningCodeGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdEarningsEarningCodeGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdEarningsEarningCodeStartDateDeleteResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdEarningsEarningCodeStartDateGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdEarningsGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdEarningsGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdEarningsPutResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdEmergencyContactsPutResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdLocalTaxesGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdLocalTaxesGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdLocalTaxesPostResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdLocalTaxesTaxCodeDeleteResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdLocalTaxesTaxCodeGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdLocalTaxesTaxCodeGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdNonprimaryStateTaxPutResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdPatchResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementDetailsYearCheckDateGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementDetailsYearCheckDateGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementDetailsYearGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementDetailsYearGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementSummaryYearCheckDateGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementSummaryYearCheckDateGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementSummaryYearGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdPaystatementSummaryYearGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdPrimaryStateTaxPutResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdSensitivedataGetResponse,
    V2CompaniesCompanyIdEmployeesEmployeeIdSensitivedataGetResponse1,
    V2CompaniesCompanyIdEmployeesEmployeeIdSensitivedataPutResponse,
    V2CompaniesCompanyIdEmployeesGetResponse,
    V2CompaniesCompanyIdEmployeesGetResponse1,
    V2CompaniesCompanyIdEmployeesPostResponse,
    V2CompaniesCompanyIdOpenapiGetResponse,
    V2CredentialsSecretsPostResponse,
    V2CredentialsSecretsPostResponse1,
    V2WeblinkstagingCompaniesCompanyIdEmployeesNewemployeesPostResponse,
    V2WeblinkstagingCompaniesCompanyIdEmployeesNewemployeesPostResponse1,
)

app = MCPProxy(
    contact={'email': 'webservices@paylocity.com'},
    description='For general questions and support of the API, contact: webservices@paylocity.com\r\n# Overview\r\n\r\nPaylocity Web Services API is an externally facing RESTful Internet protocol. The Paylocity API uses HTTP verbs and a RESTful endpoint structure. OAuth 2.0 is used as the API Authorization framework. Request and response payloads are formatted as JSON.\r\nPaylocity supports v1 and v2 versions of its API endpoints. v1, while supported, won\'t be enhanced with additional functionality. For direct link to v1 documentation, please click [here](https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm). For additional resources regarding v1/v2 differences and conversion path, please contact webservices@paylocity.com.\r\n\r\n##### Setup\r\n\r\nPaylocity will provide the secure client credentials and set up the scope (type of requests and allowed company numbers). You will receive the unique client id, secret, and Paylocity public key for the data encryption. The secret will expire in 365 days. \r\n* Paylocity will send you an e-mail 10 days prior to the expiration date for the current secret. If not renewed, the second e-mail notification will be sent 5 days prior to secret\'s expiration. Each email will contain the code necessary to renew the client secret. \r\n* You can obtain the new secret by calling API endpoint using your current not yet expired credentials and the code that was sent with the notification email. For details on API endpoint, please see Client Credentials section. \r\n* Both the current secret value and the new secret value will be recognized during the transition period. After the current secret expires, you must use the new secret. \r\n* If you were unable to renew the secret via API endpoint, you can still contact Service and they will email you new secret via secure email.\r\n\r\n\r\nWhen validating the request, Paylocity API will honor the defaults and required fields set up for the company default New Hire Template as defined in Web Pay.\r\n\r\n\r\n# Authorization\r\n\r\nPaylocity Web Services API uses OAuth2.0 Authentication with JSON Message Format.\r\n\r\n\r\nAll requests of the Paylocity Web Services API require a bearer token which can be obtained by authenticating the client with the Paylocity Web Services API via OAuth 2.0.\r\n\r\n\r\nThe client must request a bearer token from the authorization endpoint:\r\n\r\n\r\nauth-server for production: https://api.paylocity.com/IdentityServer/connect/token\r\n\r\n\r\nauth-server for testing: https://apisandbox.paylocity.com/IdentityServer/connect/token\r\n\r\nPaylocity reserves the right to impose rate limits on the number of calls made to our APIs. Changes to API features/functionality may be made at anytime with or without prior notice.\r\n\r\n##### Authorization Header\r\n\r\nThe request is expected to be in the form of a basic authentication request, with the "Authorization" header containing the client-id and client-secret. This means the standard base-64 encoded user:password, prefixed with "Basic" as the value for the Authorization header, where user is the client-id and password is the client-secret.\r\n\r\n##### Content-Type Header\r\n\r\nThe "Content-Type" header is required to be "application/x-www-form-urlencoded".\r\n\r\n##### Additional Values\r\n\r\nThe request must post the following form encoded values within the request body:\r\n\r\n    grant_type = client_credentials\r\n    scope = WebLinkAPI\r\n\r\n##### Responses\r\n\r\nSuccess will return HTTP 200 OK with JSON content:\r\n\r\n    {\r\n      "access_token": "xxx",\r\n      "expires_in": 3600,\r\n      "token_type": "Bearer"\r\n    }\r\n\r\n# Encryption\r\n\r\nPaylocity uses a combination of RSA and AES cryptography. As part of the setup, each client is issued a public RSA key.\r\n\r\nPaylocity recommends the encryption of the incoming requests as additional protection of the sensitive data. Clients can opt-out of the encryption during the initial setup process. Opt-out will allow Paylocity to process unencrypted requests.\r\n\r\nThe Paylocity Public Key has the following properties:\r\n\r\n* 2048 bit key size\r\n\r\n* PKCS1 key format\r\n\r\n* PEM encoding\r\n\r\n##### Properties\r\n\r\n* key (base 64 encoded): The AES symmetric key encrypted with the Paylocity Public Key. It is the key used to encrypt the content. Paylocity will decrypt the AES key using RSA decryption and use it to decrypt the content.\r\n\r\n* iv (base 64 encoded): The AES IV (Initialization Vector) used when encrypting the content.\r\n\r\n* content (base 64 encoded): The AES encrypted request. The key and iv provided in the secureContent request are used by Paylocity for decryption of the content.\r\n\r\nWe suggest using the following for the AES:\r\n\r\n* CBC cipher mode\r\n\r\n* PKCS7 padding\r\n\r\n* 128 bit block size\r\n\r\n* 256 bit key size\r\n\r\n##### Encryption Flow\r\n\r\n* Generate the unencrypted JSON payload to POST/PUT\r\n* Encrypt this JSON payload using your _own key and IV_ (NOT with the Paylocity public key)\r\n* RSA encrypt the _key_ you used in step 2 with the Paylocity Public Key, then, base64 encode the result\r\n* Base64 encode the IV used to encrypt the JSON payload in step 2\r\n* Put together a "securecontent" JSON object:\r\n \r\n{\r\n  \'secureContent\' : {\r\n    \'key\' : -- RSA-encrypted & base64 encoded key from step 3,\r\n    \'iv\' : -- base64 encoded iv from step 4\r\n    \'content\' -- content encrypted with your own key from step 2, base64 encoded\r\n  }\r\n}\r\n\r\n##### Sample Example\r\n\r\n    {\r\n      "secureContent": {\r\n        "key": "eS3aw6H/qzHMJ00gSi6gQ3xa08DPMazk8BFY96Pd99ODA==",\r\n        "iv": "NLyXMGq9svw0XO5aI9BzWw==",\r\n        "content": "gAEOiQltO1w+LzGUoIK8FiYbU42hug94EasSl7N+Q1w="\r\n      }\r\n    }\r\n\r\n##### Sample C# Code\r\n\r\n    using Newtonsoft.Json;\r\n    using System;\r\n    using System.IO;\r\n    using System.Security.Cryptography;\r\n    using System.Text;\r\n\r\n    public class SecuredContent\r\n    {\r\n      [JsonProperty("key")]\r\n      public string Key { get; set; }\r\n\r\n      [JsonProperty("iv")]\r\n      public string Iv { get; set; }\r\n\r\n      [JsonProperty("content")]\r\n      public string Content { get; set; }\r\n\r\n    }\r\n\r\n    public class EndUserSecureRequestExample\r\n    {\r\n      public string CreateSecuredRequest(FileInfo paylocityPublicKey, string unsecuredJsonRequest)\r\n      {\r\n        string publicKeyXml = File.ReadAllText(paylocityPublicKey.FullName, Encoding.UTF8);\r\n\r\n        SecuredContent secureContent = this.CreateSecuredContent(publicKeyXml, unsecuredJsonRequest);\r\n\r\n        string secureRequest = JsonConvert.SerializeObject(new { secureContent });\r\n\r\n        return secureRequest;\r\n      }\r\n\r\n      private SecuredContent CreateSecuredContent(string publicKeyXml, string request)\r\n      {\r\n        using (AesCryptoServiceProvider aesCsp = new AesCryptoServiceProvider())\r\n        {\r\n          aesCsp.Mode = CipherMode.CBC;\r\n          aesCsp.Padding = PaddingMode.PKCS7;\r\n          aesCsp.BlockSize = 128;\r\n          aesCsp.KeySize = 256;\r\n\r\n          using (ICryptoTransform crt = aesCsp.CreateEncryptor(aesCsp.Key, aesCsp.IV))\r\n          {\r\n            using (MemoryStream outputStream = new MemoryStream())\r\n            {\r\n              using (CryptoStream encryptStream = new CryptoStream(outputStream, crt, CryptoStreamMode.Write))\r\n              {\r\n                byte[] encodedRequest = Encoding.UTF8.GetBytes(request);\r\n                encryptStream.Write(encodedRequest, 0, encodedRequest.Length);\r\n                encryptStream.FlushFinalBlock();\r\n                byte[] encryptedRequest = outputStream.ToArray();\r\n\r\n                using (RSACryptoServiceProvider crp = new RSACryptoServiceProvider())\r\n                {\r\n                  crp.FromXmlstring(publicKeyXml);\r\n                  byte[] encryptedKey = crp.Encrypt(aesCsp.Key, false);\r\n\r\n                  return new SecuredContent()\r\n                  {\r\n                    Key = Convert.ToBase64string(encryptedKey),\r\n                    Iv = Convert.ToBase64string(aesCsp.IV),\r\n                    Content = Convert.ToBase64string(encryptedRequest)\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n## Support\r\n\r\nQuestions about using the Paylocity API? Please contact webservices@paylocity.com.\r\n\r\n# Deductions (v1)\r\n\r\nDeductions API provides endpoints to retrieve, add, update and delete deductions for a company\'s employees. For schema details, click <a href="https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm" target="_blank">here</a>.\r\n\r\n# OnBoarding (v1)\r\n\r\nOnboarding API sends employee data into Paylocity Onboarding to help ensure an easy and accurate hiring process for subsequent completion into Web Pay. For schema details, click <a href="https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm" target="_blank">here</a>.',
    title='Paylocity API',
    version='2',
    servers=[{'url': 'https://api.paylocity.com/api'}],
)


@app.get(
    '/v2/companies/{companyId}/codes/{codeResource}',
    description=""" Get All Company Codes for the selected company and resource """,
    tags=['company_code_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get__all__company__codes_and__descriptions_by__resource(
    company_id: str = Path(..., alias='companyId'),
    code_resource: str = Path(..., alias='codeResource'),
):
    """
    Get All Company Codes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/customfields/{category}',
    description=""" Get All Custom Fields for the selected company """,
    tags=['custom_field_configuration'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get__all__custom__fields_by_category(
    company_id: str = Path(..., alias='companyId'), category: str = ...
):
    """
    Get All Custom Fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/companies/{companyId}/employees',
    description=""" New Employee API sends new employee data directly to Web Pay. Companies who use the New Hire Template in Web Pay may require additional fields when hiring employees. New Employee API Requests will honor these required fields. """,
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_employee(company_id: str = Path(..., alias='companyId'), body: Employee = ...):
    """
    Add new employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/',
    description=""" Get All Employees API will return employee data currently available in Web Pay. """,
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_employees(
    company_id: str = Path(..., alias='companyId'),
    pagesize: Optional[int] = None,
    pagenumber: Optional[int] = None,
    includetotalcount: Optional[bool] = None,
):
    """
    Get all employees
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}',
    description=""" Get Employee API will return employee data currently available in Web Pay. """,
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_employee(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
):
    """
    Get employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v2/companies/{companyId}/employees/{employeeId}',
    description=""" Update Employee API will update existing employee data in WebPay. """,
    tags=['employee_record_management', 'employee_sensitive_data_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_employee(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: Employee = ...,
):
    """
    Update employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/companies/{companyId}/employees/{employeeId}/additionalRates',
    description=""" Sends new or updated employee additional rates information directly to Web Pay. """,
    tags=['employee_benefits_operations', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_or_update_additional_rates(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: AdditionalRate = ...,
):
    """
    Add/update additional rates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/companies/{companyId}/employees/{employeeId}/benefitSetup',
    description=""" Sends new or updated employee benefit setup information directly to Web Pay. """,
    tags=['employee_benefits_operations', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_or_add_employee_benefit_setup(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: BenefitSetup = ...,
):
    """
    Add/update employee's benefit setup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/directDeposit',
    description=""" Get All Direct Deposit returns main direct deposit and all additional direct depositsfor the selected employee. """,
    tags=['employee_benefits_operations', 'pay_statement_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get__all__direct__deposit(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
):
    """
    Get All Direct Deposit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/earnings',
    description=""" Get All Earnings returns all earnings for the selected employee. """,
    tags=['employee_benefits_operations', 'pay_statement_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get__all__earnings(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
):
    """
    Get All Earnings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/companies/{companyId}/employees/{employeeId}/earnings',
    description=""" Add/Update Earning API sends new or updated employee earnings information directly to Web Pay. """,
    tags=['employee_record_management', 'employee_benefits_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_or_update_an_employee_earning(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: Earning = ...,
):
    """
    Add/Update Earning
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}',
    description=""" Get Earnings returns all earnings with the provided earning code for the selected employee. """,
    tags=['employee_benefits_operations', 'pay_statement_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get__earnings_by__earning__code(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    earning_code: str = Path(..., alias='earningCode'),
):
    """
    Get Earnings by Earning Code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}',
    description=""" Delete Earning by Earning Code and Start Date """,
    tags=['employee_benefits_operations', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete__earning_by__earning__code_and__start__date(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    earning_code: str = Path(..., alias='earningCode'),
    start_date: str = Path(..., alias='startDate'),
):
    """
    Delete Earning by Earning Code and Start Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}',
    description=""" Get Earnings returns the single earning with the provided earning code and start date for the selected employee. """,
    tags=['employee_benefits_operations', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get__earning_by__earning__code_and__start__date(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    earning_code: str = Path(..., alias='earningCode'),
    start_date: str = Path(..., alias='startDate'),
):
    """
    Get Earning by Earning Code and Start Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/companies/{companyId}/employees/{employeeId}/emergencyContacts',
    description=""" Sends new or updated employee emergency contacts directly to Web Pay. """,
    tags=['employee_record_management', 'employee_sensitive_data_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_or_update_emergency_contacts(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: EmergencyContact = ...,
):
    """
    Add/update emergency contacts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/localTaxes',
    description=""" Returns all local taxes for the selected employee. """,
    tags=['tax_information_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_local_taxes(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
):
    """
    Get all local taxes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/companies/{companyId}/employees/{employeeId}/localTaxes',
    description=""" Sends new employee local tax information directly to Web Pay. """,
    tags=['tax_information_management', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_local_tax(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: LocalTax = ...,
):
    """
    Add new local tax
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}',
    description=""" Delete local tax by tax code """,
    tags=['tax_information_management', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_local_tax_by_tax_code(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    tax_code: str = Path(..., alias='taxCode'),
):
    """
    Delete local tax by tax code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}',
    description=""" Returns all local taxes with the provided tax code for the selected employee. """,
    tags=['tax_information_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_local_tax_by_tax_code(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    tax_code: str = Path(..., alias='taxCode'),
):
    """
    Get local taxes by tax code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/companies/{companyId}/employees/{employeeId}/nonprimaryStateTax',
    description=""" Sends new or updated employee non-primary state tax information directly to Web Pay. """,
    tags=['tax_information_management', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_or_update_non_primary_state_tax(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: NonPrimaryStateTax1 = ...,
):
    """
    Add/update non-primary state tax
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}',
    description=""" Get pay statement details API will return employee pay statement details data currently available in Web Pay for the specified year. """,
    tags=['pay_statement_retrieval', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_employee_pay_details_by_year(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    year: str = ...,
    pagesize: Optional[int] = None,
    pagenumber: Optional[int] = None,
    includetotalcount: Optional[bool] = None,
    codegroup: Optional[str] = None,
):
    """
    Get employee pay statement details data for the specified year.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}/{checkDate}',
    description=""" Get pay statement details API will return employee pay statement detail data currently available in Web Pay for the specified year and check date. """,
    tags=['pay_statement_retrieval', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_employee_pay_statement_details(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    year: str = ...,
    check_date: str = Path(..., alias='checkDate'),
    pagesize: Optional[int] = None,
    pagenumber: Optional[int] = None,
    includetotalcount: Optional[bool] = None,
    codegroup: Optional[str] = None,
):
    """
    Get employee pay statement details data for the specified year and check date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}',
    description=""" Get pay statement summary API will return employee pay statement summary data currently available in Web Pay for the specified year. """,
    tags=['pay_statement_retrieval', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_employee_pay_summary_by_year(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    year: str = ...,
    pagesize: Optional[int] = None,
    pagenumber: Optional[int] = None,
    includetotalcount: Optional[bool] = None,
    codegroup: Optional[str] = None,
):
    """
    Get employee pay statement summary data for the specified year.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}/{checkDate}',
    description=""" Get pay statement summary API will return employee pay statement summary data currently available in Web Pay for the specified year and check date. """,
    tags=['pay_statement_retrieval', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_employee_pay_summary_by_year_and_check_date(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    year: str = ...,
    check_date: str = Path(..., alias='checkDate'),
    pagesize: Optional[int] = None,
    pagenumber: Optional[int] = None,
    includetotalcount: Optional[bool] = None,
    codegroup: Optional[str] = None,
):
    """
    Get employee pay statement summary data for the specified year and check date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/companies/{companyId}/employees/{employeeId}/primaryStateTax',
    description=""" Sends new or updated employee primary state tax information directly to Web Pay. """,
    tags=['tax_information_management', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_or_update_primary_state_tax(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: StateTax = ...,
):
    """
    Add/update primary state tax
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/employees/{employeeId}/sensitivedata',
    description=""" Gets employee sensitive data information directly from Web Pay. """,
    tags=['employee_sensitive_data_handling', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sensitive_data(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
):
    """
    Get sensitive data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/companies/{companyId}/employees/{employeeId}/sensitivedata',
    description=""" Sends new or updated employee sensitive data information directly to Web Pay. """,
    tags=['employee_sensitive_data_handling', 'employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_or_update__sensitive__data(
    company_id: str = Path(..., alias='companyId'),
    employee_id: str = Path(..., alias='employeeId'),
    body: SensitiveData = ...,
):
    """
    Add/update sensitive data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/companies/{companyId}/openapi',
    description=""" The company-specific Open API endpoint allows the client to GET an Open API document for the Paylocity API that is customized with company-specific resource schemas. These customized resource schemas define certain properties as enumerations of pre-defined values that correspond to the company's setup with Web Pay. The customized schemas also indicate which properties are required by the company within Web Pay.<br  />To learn more about Open API, click [here](https://www.openapis.org/) """,
    tags=['api_client_secret_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_company_specific__open__a_p_i_documentation(
    authorization: str = Header(..., alias='Authorization'),
    company_id: str = Path(..., alias='companyId'),
):
    """
    Get Company-Specific Open API Documentation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/credentials/secrets',
    description=""" Obtain new client secret for Paylocity-issued client id. See Setup section for details. """,
    tags=['api_client_secret_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add__client__secret(body: AddClientSecret):
    """
    Obtain new client secret.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/weblinkstaging/companies/{companyId}/employees/newemployees',
    description=""" Add new employee to Web Link will send partially completed or potentially erroneous new hire record to Web Link, where it can be corrected and competed by company administrator or authorized Paylocity Service Bureau employee. """,
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_new_employee_to__web__link(
    company_id: str = Path(..., alias='companyId'), body: StagedEmployee = ...
):
    """
    Add new employee to Web Link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
